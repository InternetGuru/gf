#!/bin/env butt

function take {
  cd "$curdir"
  rm -rf "$1"
  mkdir "$1"
  cd "$1"
}

function git_current_branch {
  git rev-parse --abbrev-ref HEAD
}

function gsp {
  git status --porcelain
}

function gref {
  ref="$(git show-ref)"
}

function checkInitRefs {
  assert_equal $(echo "$ref" | wc -l) 3
  assert_contains "$ref" "refs/heads/dev"
  assert_contains "$ref" "refs/heads/master"
  assert_contains "$ref" "refs/tags/v0.0.0"
}
function checkInitFiles {
  assert_equal "$(cat VERSION)" "0.0.0"
  assert_equal "$(head -n1 CHANGELOG)" "# Change Log"
}
function load_log {
  log="$(git --no-pager log --oneline --decorate --graph --all)"
  IFS=$'\n' read -d '' -r -a loglines <<< "$log" || return 0
}
function load_changelog {
  chglog="$(cat CHANGELOG)"
  IFS=$'\n' read -d '' -r -a chgloglines <<< "$chglog" || return 0
}

export GF_OPTIONS=""
export COLUMNS=30

local i curdir ref log loglines chglog chgloglines
i=0
curdir="$(pwd)"
ref=
log=
loglines=()
chglog=
chgloglines=()

#######################################
## Integration
#######################################
: $((i++))
start "gf help"
  take "$i"
  debug "gf --help 2>/dev/null"
  assert_equal $status 0
  assert_startwith "${outlines[0]}" "Usage: gf [-"
end
#######################################
: $((i++))
start "gf version"
  take "$i"
  debug "gf --version"
  assert_equal $status 0
  assert_startwith "${outlines[0]}" "GNU gf "
end
#######################################
: $((i++))
start "man gf"
  take "$i"
  debug "man 2>/dev/null gf"
  assert_equal $status 0
  assert_startwith "${outlines[0]}" "GF(1)"
end
#######################################
## Error codes
#######################################
: $((i++))
start "invalid option error code"
  take "$i"
  debug "gf --invalid-option"
  assert_equal $status 2
  assert_startwith "${outlines[0]}" "Usage: gf [-"
end
#######################################
: $((i++))
start "missing git error code"
  take "$i"
  debug "gf"
  assert_equal $status 3
  assert_startwith "${errlines[0]}" "gf[error]: Git repository does not exist"
end
#######################################
: $((i++))
start "missing branch dev error code"
  take "$i"
  { gf -i \
    && git checkout master \
    && git branch -d dev
  } >/dev/null 2>&1
  debug "gf"
  assert_equal $status 3
  assert_startwith "${errlines[0]}" "gf[error]: Missing branch 'dev'"
end
#######################################
: $((i++))
start "missing VERSION file error code"
  take "$i"
  { gf -i \
    && rm VERSION \
    && git commit -am "delete VERSION file"
  } >/dev/null
  debug "gf"
  assert_equal $status 3
  assert_equal "${errlines[0]}" "gf[error]: Missing or empty file 'VERSION'"
end
#######################################
: $((i++))
start "dev is behind master error code"
  take "$i"
  { gf -i \
    && echo a > a \
    && git add a \
    && git commit -am "add file a" \
    && gf --yes \
    && gf --yes \
    && git reset --hard HEAD~1
  } >/dev/null
  debug "gf -v"
  assert_equal $status 3
  assert_startwith "${errlines[0]}" "gf[error]: Branch master is not merged with 'dev'"
end
#######################################
: $((i++))
start "uncommitted changes error code"
  take "$i"
  { gf -i \
    && echo a > a
  } >/dev/null
  debug "gf"
  assert_equal $status 4
  assert_startwith "${errlines[0]}" "gf[error]: Uncommitted changes"
end
#######################################
: $((i++))
start "conflicting merge error code"
  take "$i"
  { gf -i \
    && gf --yes hotfix \
    && git checkout dev 2>&1 \
    && echo 1.0.0 > VERSION \
    && git commit -am "bump version"
  } >/dev/null
  debug "gf --yes hotfix"
  assert_equal $status 5
  assert_startwith "${errlines[0]}" "gf[error]: Auto-merging"
end
#######################################
## Dry run
#######################################
: $((i++))
start "dry run"
  take "$i"
  debug "gf --dry-run"
  assert_equal $status 0
end
#######################################
: $((i++))
start "dry run and invalid option"
  take "$i"
  debug "gf --dry-run --invalid-option"
  assert_equal $status 2
  #assert_startwith "${outlines[0]}" "getopt: unknown"
  assert_startwith "${outlines[0]}" "Usage: gf [-"
end
#######################################
## Init
#######################################
: $((i++))
start "init on empty folder"
  take "$i"
  debug "gf -v --init"
  assert_equal $status 0
  checkInitFiles
  gref
  checkInitRefs
  assert_equal "$(gsp)" ""
end
#######################################
: $((i++))
start "init on non-empty folder"
  take "$i"
  { echo a > a \
    && echo b > b \
    && echo test > .gitignore
  } >/dev/null
  debug "gf -v --init"
  assert_equal $status 0
  checkInitFiles
  gref
  checkInitRefs
  assert_equal "$(gsp)" ""
end
#######################################
: $((i++))
start "init on existing repo with commits"
  take "$i"
  { git init \
    && echo a > a \
    && git add . \
    && git commit -am "first commit.."
  } >/dev/null
  debug "gf -v --init"
  assert_equal $status 0
  checkInitFiles
  gref
  checkInitRefs
  assert_equal "$(gsp)" ""
end
#######################################
: $((i++))
start "init on existing repo without commits"
  take "$i"
  { git init \
    && echo a > a
  } >/dev/null
  debug "gf -v --init"
  assert_equal $status 0
  checkInitFiles
  gref
  checkInitRefs
  assert_equal "$(gsp)" ""
end
#######################################
: $((i++))
start "init on existing repo with commits and --force"
  take "$i"
  { git init \
    && echo a > a \
    && git add . \
    && git commit -am "first commit" \
    && echo b > b
  } >/dev/null
  debug "gf -v --init --force"
  assert_equal $status 0
  checkInitFiles
  gref
  checkInitRefs
  assert_equal "$(gsp | wc -l)" 1
end
#######################################
## Conform
#######################################
: $((i++))
start "conform on empty folder"
  take "$i"
  debug "yes no | gf -v --conform"
  assert_equal $status 0
  checkInitFiles
  gref
  checkInitRefs
  assert_equal "$(gsp)" ""
end
#######################################
: $((i++))
start "conform on non-empty folder"
  take "$i"
  { echo a > a \
    && echo b > b \
    && echo test > .gitignore
  } >/dev/null
  debug "yes no | gf -v --conform"
  assert_equal $status 0
  checkInitFiles
  gref
  checkInitRefs
  assert_equal "$(gsp)" ""
end
#######################################
: $((i++))
start "conform on existing repo with commits"
  take "$i"
  { git init \
    && echo a > a \
    && git add . \
    && git commit -am "first commit.."
  } >/dev/null
  debug "yes no | gf -v --conform"
  assert_equal $status 0
  checkInitFiles
  gref
  checkInitRefs
  assert_equal "$(gsp)" ""
end
#######################################
: $((i++))
start "conform on existing repo without commits"
  take "$i"
  { git init \
    && echo a > a
  } >/dev/null
  debug "yes no | gf -v --conform"
  assert_equal $status 0
  checkInitFiles
  gref
  checkInitRefs
  assert_equal "$(gsp)" ""
end
#######################################
: $((i++))
start "conform on existing repo with commits and --force"
  take "$i"
  { git init \
    && echo a > a \
    && git add . \
    && git commit -am "first commit" \
    && echo b > b
  } >/dev/null
  debug "yes no | gf -v --conform --force"
  assert_equal $status 0
  checkInitFiles
  gref
  checkInitRefs
  assert_equal "$(gsp | wc -l)" 1
end
#######################################
## Feature
#######################################
: $((i++))
start "create feature"
  take "$i"
  { gf --init; } >/dev/null
  debug "gf -v --yes myfeature"
  assert_equal $status 0
  assert_contains "${outlines[0]}" "Creating branch 'myfeature'"
  gref
  assert_contains "$ref" "refs/heads/myfeature"
  assert_equal "$(git_current_branch)" "myfeature"
end
#######################################
: $((i++))
start "create feature with uncommited changes and --force"
  take "$i"
  { gf --init \
    && echo a > a
  } >/dev/null
  debug "gf -v --yes --force myfeature"
  assert_equal $status 0
  assert_contains "${outlines[0]}" "Stashing files"
  assert_equal "$(git_current_branch)" "myfeature"
  assert_equal "$(gsp)" "A  a"
end
#######################################
: $((i++))
start "merge feature"
  take "$i"
  { gf --init \
    && gf --yes myfeature \
    && echo a > a \
    && git add . \
    && git commit -am "add feature 1"
  } >/dev/null
  debug "echo 'feature1' | gf -v --yes"
  assert_equal $status 0
  load_log
  assert_contains "$log" "Version history updated"
  assert_contains "${loglines[0]}" "(HEAD, dev) Merge branch 'myfeature' into dev"
  gref
  assert_equal "$(echo "$ref" | grep /refs/heads/myfeature)" ""
  load_changelog
  assert_equal "${chgloglines[0]}" "feature1"
  assert_equal "$(gsp)" ""
end
#######################################
: $((i++))
start "merge empty feature"
  take "$i"
  { gf --init \
    && gf --yes myfeature
  } >/dev/null
  debug "gf -v --yes"
  assert_equal $status 1
  assert_startwith "${errlines[0]}" "gf[error]: Nothing to merge"
end
#######################################
: $((i++))
start "merge feature with rebase"
  take "$i"
  { gf --init \
    && gf --yes myfeature \
    && echo a > a \
    && git add . \
    && git commit -am "add feature 1" \
    && git checkout dev \
    && echo c > c \
    && git add . \
    && git commit -am "bugfix 1"
  } >/dev/null 2>&1
  debug "echo 'feature1' | gf -v --yes myfeature"
  assert_equal $status 0
  load_log
  assert_contains "$log" "Version history updated"
  assert_contains "${loglines[0]}" "(HEAD, dev) Merge branch 'myfeature' into dev"
  assert_contains "${loglines[5]}" "bugfix 1"
  gref
  assert_equal "$(echo "$ref" | grep /refs/heads/myfeature)" ""
  load_changelog
  assert_equal "${chgloglines[0]}" "feature1"
  assert_equal "$(gsp)" ""
end
#######################################
: $((i++))
start "merge feature with conflicting rebase"
  take "$i"
  { gf --init \
    && gf --yes myfeature \
    && echo a > a \
    && git add . \
    && git commit -am "change file a" \
    && git checkout dev \
    && echo b > a \
    && git add . \
    && git commit -am "change file a"
  } >/dev/null 2>&1
  debug "echo 'feature1' | gf -v --yes myfeature"
  assert_equal $status 5
  assert_equal "$(gsp)" "AA a"
end
#######################################
: $((i++))
start "merge feature with uncommited changes and --force"
  take "$i"
  { gf --init \
    && gf --yes myfeature \
    && echo a > a \
    && git add . \
    && git commit -am "add feature 1" \
    && echo b > b
  } >/dev/null
  debug "echo 'feature1' | gf -v --yes --force"
  assert_equal $status 0
  assert_contains "${outlines[0]}" "Stashing files"
  load_log
  assert_contains "$log" "Version history updated"
  assert_contains "${loglines[0]}" "(HEAD, dev) Merge branch 'myfeature' into dev"
  gref
  assert_equal "$(echo "$ref" | grep /refs/heads/myfeature)" ""
  assert_equal "$(gsp)" "A  b"
end
#######################################
# start "merge feature with --request"
#   { gf --init \
#     && gf --yes myfeature \
#     && echo a > a \
#     && git add . \
#     && git commit -am "add feature 1"
#   } >/dev/null
#   debug "echo 'feature1' | gf -v --yes --request"
# fi
#######################################
# TODO: 7.h
#######################################
## RELEASE
#######################################
: $((i++))
start "create release"
  take "$i"
  { gf --init \
    && echo a > a \
    && git add . \
    && git commit -m "add file a"
  } >/dev/null
  debug "gf -v --yes"
  assert_equal $status 0
  load_log
  assert_contains "${loglines[0]}" "Merge branch 'release' into dev"
  gref
  assert_contains "$ref" "refs/heads/release"
  assert_equal "$(cat VERSION)" "0.1.0"
  assert_equal "$(gsp)" ""
end
#######################################
: $((i++))
start "try create two releases"
  take "$i"
  { gf --init \
    && echo a > a \
    && git add . \
    && git commit -m "add file a" \
    && gf --yes \
    && git checkout dev \
    && echo b > b \
    && git add . \
    && git commit -m "add file b"
  } >/dev/null 2>&1
  debug "gf -v --yes"
  assert_equal $status 1
  assert_equal "${errlines[0]}" "gf[error]: Destination branch 'release' already exists"
  assert_equal "$(gsp)" ""
end
#######################################
: $((i++))
start "release with uncommited changes and --force"
  take "$i"
  { gf --init \
    && echo a > a \
    && git add . \
    && git commit -m "add file a" \
    && echo b > b
  } >/dev/null
  debug "gf -v --yes --force"
  assert_equal $status 0
  assert_contains "${outlines[0]}" "Stashing files"
  load_log
  assert_contains "${loglines[0]}" "Merge branch 'release' into dev"
  gref
  assert_contains "$ref" "refs/heads/release"
  assert_equal "$(cat VERSION)" "0.1.0"
  assert_equal "$(gsp)" "A  b"
end
#######################################
: $((i++))
start "release by kw"
  take "$i"
  { gf --init \
    && echo a > a \
    && git add . \
    && git commit -m "add file a"
  } >/dev/null
  debug "gf -v --yes release"
  assert_equal $status 0
  load_log
  assert_contains "${loglines[0]}" "(dev) Merge branch 'release' into dev"
  gref
  assert_contains "$ref" "refs/heads/release"
  assert_equal "$(cat VERSION)" "0.1.0"
  assert_equal "$(gsp)" ""
end
#######################################
: $((i++))
start "merge release"
  take "$i"
  { gf --init \
    && echo a > a \
    && git add . \
    && git commit -m "add file a" \
    && gf --yes
  } >/dev/null
  debug "gf -v --yes"
  assert_equal $status 0
  load_log
  assert_contains "$log" "(HEAD, dev) Merge branch 'release' into dev"
  gref
  assert_equal "$(echo "$ref" | grep /refs/heads/release)" ""
  load_changelog
  assert_equal "${chgloglines[0]}" "0.1 | $(date '+%Y-%m-%d')"
  assert_equal "$(gsp)" ""
end
#######################################
: $((i++))
start "merge release with conflict"
  take "$i"
  { gf --init \
    && echo a > a \
    && git add . \
    && git commit -m "add file a" \
    && gf --yes \
    && git checkout dev \
    && echo 1.0.0 > VERSION \
    && git commit -am "bump dev VERSION" \
    && git checkout release \
    && echo 2.0.0 > VERSION \
    && git commit -am "bump release VERSION"
  } >/dev/null 2>&1
  debug "gf -v --yes"
  assert_equal $status 5
  assert_equal "$(gsp)" "UU VERSION"
end
#######################################
: $((i++))
start "merge release by kw"
  take "$i"
  { gf --init \
    && echo a > a \
    && git add . \
    && git commit -m "add file a" \
    && gf --yes \
    && git checkout master
  } >/dev/null 2>&1
  debug "gf -v --yes release"
  assert_equal $status 0
  load_log
  assert_contains "$log" "(HEAD, dev) Merge branch 'release' into dev"
  gref
  assert_equal "$(echo "$ref" | grep /refs/heads/release)" ""
  load_changelog
  assert_equal "${chgloglines[0]}" "0.1 | $(date '+%Y-%m-%d')"
  assert_equal "$(gsp)" ""
end
#######################################
: $((i++))
start "merge release with uncommited changes and --force"
  take "$i"
  { gf --init \
    && echo a > a \
    && git add . \
    && git commit -m "add file a" \
    && gf --yes \
    && echo b > b
  } >/dev/null
  debug "gf -v --yes --force"
  assert_equal $status 0
  assert_contains "${outlines[0]}" "Stashing files"
  assert_contains "${loglines[0]}" "Merge branch 'release'"
  gref
  assert_equal "$(cat VERSION)" "0.1.0"
  assert_equal "$(gsp)" "A  b"
end
#######################################
: $((i++))
# start "merge release with --request"
  take "$i"
#   { gf --init \
#     && gf --yes
#   } >/dev/null
#   debug "gf -v --yes --request"
# fi
#######################################
# TODO: 8.i
#######################################
## HOTFIX
#######################################
: $((i++))
start "hotfix master"
  take "$i"
  { gf -i; } >/dev/null
  debug "gf -v --yes master"
  assert_equal $status 0
  load_log
  assert_contains "${loglines[0]}" "(HEAD, hotfix-0.0.1) hotfix-0.0.1"
  assert_equal "$(cat VERSION)" "0.0.1"
  assert_equal "$(gsp)" ""
end
#######################################
: $((i++))
start "hotfix stable"
  take "$i"
  { gf -i \
   && echo a > a \
   && git add . \
   && git commit -m "add file a" \
   && gf --yes \
   && gf --yes \
   && git checkout v0.0.0
  } >/dev/null 2>&1
  debug "gf -v --yes"
  assert_equal $status 0
  load_log
  assert_contains "$log" "(HEAD, hotfix-0.0.1) hotfix-0.0.1"
  assert_equal "$(cat VERSION)" "0.0.1"
  assert_equal "$(gsp)" ""
end
#######################################
: $((i++))
start "hotfix master by kw"
  take "$i"
  { gf -i \
    && git checkout dev
  } >/dev/null 2>&1
  debug "gf -v --yes hotfix"
  assert_equal $status 0
  load_log
  assert_contains "${loglines[0]}" "(HEAD, hotfix-0.0.1) hotfix-0.0.1"
  assert_equal "$(cat VERSION)" "0.0.1"
  assert_equal "$(gsp)" ""
end
#######################################
: $((i++))
start "hotfix master by name of stable"
  take "$i"
  { gf -i; } >/dev/null
  debug "gf -v --yes v0.0"
  assert_equal $status 0
  load_log
  assert_contains "${loglines[0]}" "(HEAD, hotfix-0.0.1) hotfix-0.0.1"
  assert_equal "$(cat VERSION)" "0.0.1"
  assert_equal "$(gsp)" ""
end
#######################################
: $((i++))
start "hotfix stable by name of stable"
  take "$i"
  { gf -i \
   && gf --yes \
   && gf --yes
  } >/dev/null 2>&1
  debug "gf -v --yes v0.0"
  assert_equal $status 0
  load_log
  assert_contains "${loglines[0]}" "(HEAD, hotfix-0.0.1) hotfix-0.0.1"
  assert_equal "$(cat VERSION)" "0.0.1"
  assert_equal "$(gsp)" ""
end
#######################################
: $((i++))
start "hotfix master by tag name"
  take "$i"
  { gf -i; } >/dev/null
  debug "gf -v --yes v0.0.0"
  assert_equal $status 0
  load_log
  assert_contains "${loglines[0]}" "(HEAD, hotfix-0.0.1) hotfix-0.0.1"
  assert_equal "$(cat VERSION)" "0.0.1"
  assert_equal "$(gsp)" ""
end
#######################################
: $((i++))
start "hotfix stable by tag name"
  take "$i"
  { gf -i \
   && gf --yes \
   && gf --yes
  } >/dev/null 2>&1
  debug "gf -v --yes v0.0.0"
  assert_equal $status 0
  load_log
  assert_contains "${loglines[0]}" "(HEAD, hotfix-0.0.1) hotfix-0.0.1"
  assert_equal "$(cat VERSION)" "0.0.1"
  assert_equal "$(gsp)" ""
end
#######################################
: $((i++))
start "hotfix master by old tag"
  take "$i"
  { gf -i \
   && gf --yes hotfix \
   && gf --yes;
  } >/dev/null
  debug "gf -v --yes v0.0.0"
  assert_equal $status 1
  assert_equal "${errlines[0]}" "gf[error]: Current branch is already hotfixed"
  assert_equal "$(gsp)" ""
end
#######################################
: $((i++))
start "hotfix stable by old tag"
  take "$i"
  { gf -i \
   && echo a > a \
   && git add . \
   && git commit -m "add file a" \
   && gf --yes \
   && gf --yes \
   && gf --yes v0.0.0 \
   && gf --yes; } >/dev/null
  debug "gf -v --yes v0.0.0"
  assert_equal $status 1
  assert_equal "${errlines[0]}" "gf[error]: Current branch is already hotfixed"
  assert_equal "$(gsp)" ""
end
#######################################
# TODO: 9.f – 9.g
#######################################
: $((i++))
start "merge master hotfix"
  take "$i"
  { gf -i \
   && gf --yes master; } >/dev/null
  debug "gf -v --yes"
  assert_equal $status 0
  load_log
  assert_contains "${loglines[0]}" "(HEAD, dev) Merge branch 'hotfix-0.0.1' into dev"
  assert_equal "$(cat VERSION)" "0.0.1"
  gref
  assert_equal "$(echo "$ref" | grep /refs/heads/hotfix-0.0.1)" ""
  assert_equal "$(gsp)" ""
end
#######################################
: $((i++))
start "merge master hotfix by kw"
  take "$i"
  { gf -i \
   && gf --yes master; } >/dev/null
  debug "gf -v --yes hotfix"
  assert_equal $status 0
  load_log
  assert_contains "${loglines[0]}" "(HEAD, dev) Merge branch 'hotfix-0.0.1' into dev"
  assert_equal "$(cat VERSION)" "0.0.1"
  gref
  assert_equal "$(echo "$ref" | grep /refs/heads/hotfix-0.0.1)" ""
  assert_equal "$(gsp)" ""
end
#######################################
: $((i++))
start "merge stable hotfix"
  take "$i"
  { gf -i \
   && echo a > a \
   && git add . \
   && git commit -m "add file a" \
   && gf --yes \
   && gf --yes \
   && gf --yes v0.0.0; } >/dev/null
  debug "gf -v --yes"
  assert_equal $status 0
  load_log
  assert_contains "$log" "(HEAD, tag: v0.0.1, v0.0) Merge branch 'hotfix-0.0.1' into v0.0"
  assert_equal "$(cat VERSION)" "0.0.1"
  gref
  assert_equal "$(echo "$ref" | grep /refs/heads/hotfix-0.0.1)" ""
  assert_equal "$(gsp)" ""
end
#######################################
# TODO: 9.i – 9.m
#######################################
# TODO: 10
#######################################
